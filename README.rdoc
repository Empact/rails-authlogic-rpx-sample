=  RAILS-AUTHLOGIC-RPX-SAMPLE

== Purpose

Demonstrates the use of rails with Authlogic and Authlogic_RPX gems for authentication.

== Authlogic_RPX References

* <b>Live Demonstration Site:</b> http://rails-authlogic-rpx-sample.heroku.com
* <b>Demonstration site source repository:</b> http://github.com/tardate/rails-authlogic-rpx-sample
*	<b>Authlogic_RPX gem repo:</b> http://github.com/tardate/authlogic_rpx
* <b>Related blog post:</b> 

== Other Authlogic and RPX References

*	<b>Authlogic documentation:</b> http://rdoc.info/projects/binarylogic/authlogic
*	<b>Authlogic repo:</b> http://github.com/binarylogic/authlogic
*	<b>RPX documentation:</b> https://rpxnow.com/docs
*	<b>RPX_now gem repo:</b> http://github.com/grosser/rpx_now

== Using Authlogic_RPX

See the documentation provided with the gem at http://github.com/tardate/authlogic_rpx


protecting controller actions


= STEP-BY-STEP (how the app was created)

== 1. Install oauth gem

	gem install oauth

== 2. create the application shell

	rails rails-twitter-oauth-sample
	cd rails-twitter-oauth-sample
	rake db:create

== 3. create a member scaffold

	ruby script/generate scaffold member twitter_id:integer screen_name:string token:string secret:string profile_image_url:string

Member model updated to use screen_name as the key:

		def to_param
			screen_name
		end
		
== 4. Prepare the database

	rake db:migrate

== 5. Create the oauth support in ./lib

twitter_oauth.rb

* Implements TwitterOauth class, which is a wrapper around the oauth gem, providing specific support for twitter.
* As a design principle, the TwitterOauth class logs and re-raises any errors that occur; some custom error classes are defined to suit.
* It includes implementations for many of the twitter api methods (but not all at this point)
		
oauth_system.rb

* A controller mixin module to provide twitter oauth support in an application.
* Uses the TwitterOauth class for oauth functionality.
* Works specifically with the Member ActiveRecord class to update/verify user details.
* It includes wrappers for many of the twitter api methods, basically to reroute errors into the flash hash.


== 6. Modify MembersController to use OAuth

	# include the oauth_system mixin
	include OauthSystem
	# specify oauth to be on all user-specific actions
	before_filter :oauth_login_required, :except => [ :callback, :signout, :index ]

== 7. Specify routes

Map members resources
Hook /members/callback method to module OauthSystem.callback
	
	map.resources :members,
	  :collection => { :callback => :get }

Hook /signout method to module OauthSystem.signout:
	
	map.signout '/signout', :controller => 'members', :action => 'signout'

For the sample app, use MembersController.index as the landing page:
	
	map.root      :controller => "members"


== 8. Customise views and controller methods for some basic functionality

MembersController actions

* index - a basic landing page
* show - main page for logged-in user
* partialfriends - xhr responder to render friends list
* partialfollowers - xhr responder to render followers list 
* partialmentions - xhr responder to render mentions list
* partialdms - xhr responder to render direct messages list

	
== 9. Add rake task to demonstrate proxy-login

See lib/tasks/test.rake:
demo_proxy_login task connects as the last member and exercises the API a bit

To execute:

	rake demo_proxy_login

== 10. Configuring twitter application keys

Register your application at http://twitter.com/oauth_clients

Be sure to select the following settings in the registration: 
* Application Type = Browser
* Callback URL = the fully qualified callback to your app e.g. http://rails-twitter-oauth-sample.heroku.com/members/callback
* Default Access type = Read & Write (if you want to be able to do things like post status updates)
* Use Twitter for login = yes

Note the "application key" and "consumer secret" numbers that twitter generates - these are unique for your application
and are required to complete the configuration.

Add the twitter application key and consumer secret as operating system environment variables
(TWOAUTH_KEY and TWOAUTH_SECRET respectively).

Set your callback URL as operating system environment variable (TWOAUTH_CALLBACK).
 
Alternatively, you can edit config/environment.rb to set these directly.

If you are using heroku, add the environment keys using the heroky utility (gem):

	heroku config:add TWOAUTH_KEY=8N029N81 TWOAUTH_SECRET=9s83109d3+583493190 TWOAUTH_CALLBACK=http://rails-twitter-oauth-sample.heroku.com/members/callback
	

== 11. Testing the application locally

When you register the application at twitter, you will specify a fully qualified callback URL
e.g. http://rails-twitter-oauth-sample.heroku.com/members/callback

This is the address that twitter sends users back to after the twitter authentication step.

To test on a local development machine (not known on the web/in DNS as the domain name in the callback),
you can simply add the registered domain to your hosts file (aliasing localhost) e.g.

	127.0.0.1       rails-twitter-oauth-sample.heroku.com

NB: most browsers will need to be restarted each time you change this,
as the resolved name will have been cached if you have already used the address.


== Kudos and Kopywrite

Thanks to {binarylogic}[http://github.com/binarylogic] for cleaning up authentication in rails by creating Authlogic in the first place and offering it to the community.

The idea of adding RPX support to authlogic is not new. Some early ideas were found in the following projects, although it was decided not to base this implementation on a fork of these, since the approaches varied considerably: 
*	<b>http://github.com/hunter/authlogic_rpx</b> an initial start, based on authlogic_openid and using rpx_now
*	<b>http://github.com/gampleman/authlogic_rpx/</b> similar, but including an implementation of the RPX api

authlogic_rpx was created by Paul Gallagher (tardate.com) and released under the MIT license.